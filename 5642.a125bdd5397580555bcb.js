"use strict";(("undefined"!=typeof self?self:this).webpackChunk_subwallet_sub_connect=("undefined"!=typeof self?self:this).webpackChunk_subwallet_sub_connect||[]).push([[5642],{55642:(e,t,s)=>{s.d(t,{REQUIRED_METHODS:()=>r,default:()=>y});var n=s(50046),i=s(32218),a=s(6753);const r=["eth_sendTransaction","personal_sign"],o=["eth_accounts","eth_requestAccounts","eth_sendRawTransaction","eth_sign","eth_signTransaction","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","eth_sendTransaction","personal_sign","wallet_switchEthereumChain","wallet_addEthereumChain","wallet_getPermissions","wallet_requestPermissions","wallet_registerOnboarding","wallet_watchAsset","wallet_scanQRCode","wallet_sendCalls","wallet_getCapabilities","wallet_getCallsStatus","wallet_showCallsStatus"],c=["chainChanged","accountsChanged"],h=["chainChanged","accountsChanged","message","disconnect","connect"];var l=Object.defineProperty,d=Object.defineProperties,p=Object.getOwnPropertyDescriptors,u=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,g=Object.prototype.propertyIsEnumerable,w=(e,t,s)=>t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s,f=(e,t)=>{for(var s in t||(t={}))m.call(t,s)&&w(e,s,t[s]);if(u)for(var s of u(t))g.call(t,s)&&w(e,s,t[s]);return e},v=(e,t)=>d(e,p(t)),C=(e,t,s)=>w(e,"symbol"!=typeof t?t+"":t,s);function I(e){return Number(e[0].split(":")[1])}function b(e){return`0x${e.toString(16)}`}class y{constructor(){C(this,"events",new n.EventEmitter),C(this,"namespace","eip155"),C(this,"accounts",[]),C(this,"signer"),C(this,"chainId",1),C(this,"modal"),C(this,"rpc"),C(this,"STORAGE_KEY","wc@2:ethereum_provider:"),C(this,"on",(e,t)=>(this.events.on(e,t),this)),C(this,"once",(e,t)=>(this.events.once(e,t),this)),C(this,"removeListener",(e,t)=>(this.events.removeListener(e,t),this)),C(this,"off",(e,t)=>(this.events.off(e,t),this)),C(this,"parseAccount",e=>this.isCompatibleChainId(e)?this.parseAccountId(e).address:e),this.signer={},this.rpc={}}static async init(e){const t=new y;return await t.initialize(e),t}async request(e,t){return await this.signer.request(e,this.formatChainId(this.chainId),t)}sendAsync(e,t,s){this.signer.sendAsync(e,t,this.formatChainId(this.chainId),s)}get connected(){return!!this.signer.client&&this.signer.client.core.relayer.connected}get connecting(){return!!this.signer.client&&this.signer.client.core.relayer.connecting}async enable(){return this.session||await this.connect(),await this.request({method:"eth_requestAccounts"})}async connect(e){var t;if(!this.signer.client)throw new Error("Provider not initialized. Call init() first");this.loadConnectOpts(e);const{required:s,optional:n}=function(e){const{chains:t,optionalChains:s,methods:n,optionalMethods:a,events:l,optionalEvents:d,rpcMap:p}=e;if(!(0,i.OP1)(t))throw new Error("Invalid chains");const u={chains:t,methods:n||r,events:l||c,rpcMap:f({},t.length?{[I(t)]:p[I(t)]}:{})},m=l?.filter(e=>!c.includes(e)),g=n?.filter(e=>!r.includes(e));if(!(s||d||a||null!=m&&m.length||null!=g&&g.length))return{required:t.length?u:void 0};const w={chains:[...new Set(m?.length&&g?.length||!s?u.chains.concat(s||[]):s)],methods:[...new Set(u.methods.concat(null!=a&&a.length?a:o))],events:[...new Set(u.events.concat(null!=d&&d.length?d:h))],rpcMap:p};return{required:t.length?u:void 0,optional:s.length?w:void 0}}(this.rpc);try{const t=await new Promise(async(t,i)=>{var a,r;this.rpc.showQrModal&&(null==(a=this.modal)||a.open(),null==(r=this.modal)||r.subscribeState(e=>{!e.open&&!this.signer.session&&(this.signer.abortPairingAttempt(),i(new Error("Connection request reset. Please try again.")))}));const o=null!=e&&e.scopedProperties?{[this.namespace]:e.scopedProperties}:void 0;await this.signer.connect(v(f({namespaces:f({},s&&{[this.namespace]:s})},n&&{optionalNamespaces:{[this.namespace]:n}}),{pairingTopic:e?.pairingTopic,scopedProperties:o})).then(e=>{t(e)}).catch(e=>{var t;null==(t=this.modal)||t.showErrorMessage("Unable to connect"),i(new Error(e.message))})});if(!t)return;const a=(0,i.Zz7)(t.namespaces,[this.namespace]);this.setChainIds(this.rpc.chains.length?this.rpc.chains:a),this.setAccounts(a),this.events.emit("connect",{chainId:b(this.chainId)})}catch(e){throw this.signer.logger.error(e),e}finally{null==(t=this.modal)||t.close()}}async authenticate(e,t){var s;if(!this.signer.client)throw new Error("Provider not initialized. Call init() first");this.loadConnectOpts({chains:e?.chains});try{const s=await new Promise(async(s,n)=>{var i,a;this.rpc.showQrModal&&(null==(i=this.modal)||i.open(),null==(a=this.modal)||a.subscribeState(e=>{!e.open&&!this.signer.session&&(this.signer.abortPairingAttempt(),n(new Error("Connection request reset. Please try again.")))})),await this.signer.authenticate(v(f({},e),{chains:this.rpc.chains}),t).then(e=>{s(e)}).catch(e=>{var t;null==(t=this.modal)||t.showErrorMessage("Unable to connect"),n(new Error(e.message))})}),n=s.session;if(n){const e=(0,i.Zz7)(n.namespaces,[this.namespace]);this.setChainIds(this.rpc.chains.length?this.rpc.chains:e),this.setAccounts(e),this.events.emit("connect",{chainId:b(this.chainId)})}return s}catch(e){throw this.signer.logger.error(e),e}finally{null==(s=this.modal)||s.close()}}async disconnect(){this.session&&await this.signer.disconnect(),this.reset()}get isWalletConnect(){return!0}get session(){return this.signer.session}registerEventListeners(){this.signer.on("session_event",e=>{const{params:t}=e,{event:s}=t;"accountsChanged"===s.name?(this.accounts=this.parseAccounts(s.data),this.events.emit("accountsChanged",this.accounts)):"chainChanged"===s.name?this.setChainId(this.formatChainId(s.data)):this.events.emit(s.name,s.data),this.events.emit("session_event",e)}),this.signer.on("accountsChanged",e=>{this.accounts=this.parseAccounts(e),this.events.emit("accountsChanged",this.accounts)}),this.signer.on("chainChanged",e=>{const t=parseInt(e);this.chainId=t,this.events.emit("chainChanged",b(this.chainId)),this.persist()}),this.signer.on("session_update",e=>{this.events.emit("session_update",e)}),this.signer.on("session_delete",e=>{this.reset(),this.events.emit("session_delete",e),this.events.emit("disconnect",v(f({},(0,i.Hjj)("USER_DISCONNECTED")),{data:e.topic,name:"USER_DISCONNECTED"}))}),this.signer.on("display_uri",e=>{this.events.emit("display_uri",e)})}switchEthereumChain(e){this.request({method:"wallet_switchEthereumChain",params:[{chainId:e.toString(16)}]})}isCompatibleChainId(e){return"string"==typeof e&&e.startsWith(`${this.namespace}:`)}formatChainId(e){return`${this.namespace}:${e}`}parseChainId(e){return Number(e.split(":")[1])}setChainIds(e){const t=e.filter(e=>this.isCompatibleChainId(e)).map(e=>this.parseChainId(e));t.length&&(this.chainId=t[0],this.events.emit("chainChanged",b(this.chainId)),this.persist())}setChainId(e){if(this.isCompatibleChainId(e)){const t=this.parseChainId(e);this.chainId=t,this.switchEthereumChain(t)}}parseAccountId(e){const[t,s,n]=e.split(":");return{chainId:`${t}:${s}`,address:n}}setAccounts(e){this.accounts=e.filter(e=>this.parseChainId(this.parseAccountId(e).chainId)===this.chainId).map(e=>this.parseAccountId(e).address),this.events.emit("accountsChanged",this.accounts)}getRpcConfig(e){var t,s;const n=null!=(t=e?.chains)?t:[],i=null!=(s=e?.optionalChains)?s:[],a=n.concat(i);if(!a.length)throw new Error("No chains specified in either `chains` or `optionalChains`");const o=n.length?e?.methods||r:[],h=n.length?e?.events||c:[],l=e?.optionalMethods||[],d=e?.optionalEvents||[],p=e?.rpcMap||this.buildRpcMap(a,e.projectId),u=e?.qrModalOptions||void 0;return{chains:n?.map(e=>this.formatChainId(e)),optionalChains:i.map(e=>this.formatChainId(e)),methods:o,events:h,optionalMethods:l,optionalEvents:d,rpcMap:p,showQrModal:!(null==e||!e.showQrModal),qrModalOptions:u,projectId:e.projectId,metadata:e.metadata}}buildRpcMap(e,t){const s={};return e.forEach(e=>{s[e]=this.getRpcUrl(e,t)}),s}async initialize(e){if(this.rpc=this.getRpcConfig(e),this.chainId=this.rpc.chains.length?I(this.rpc.chains):I(this.rpc.optionalChains),this.signer=await a.UniversalProvider.init({projectId:this.rpc.projectId,metadata:this.rpc.metadata,disableProviderPing:e.disableProviderPing,relayUrl:e.relayUrl,storage:e.storage,storageOptions:e.storageOptions,customStoragePrefix:e.customStoragePrefix,telemetryEnabled:e.telemetryEnabled,logger:e.logger}),this.registerEventListeners(),await this.loadPersistedSession(),this.rpc.showQrModal){let e;try{const t=await(async()=>{const{createAppKit:e}=await s.e(1138).then(s.bind(s,11138));return e})(),{convertWCMToAppKitOptions:n}=await Promise.resolve().then(function(){return T}),i=n(v(f({},this.rpc.qrModalOptions),{chains:[...new Set([...this.rpc.chains,...this.rpc.optionalChains])],metadata:this.rpc.metadata,projectId:this.rpc.projectId}));if(!i.networks.length)throw new Error("No networks found for WalletConnectÂ·");e=t(v(f({},i),{universalProvider:this.signer,manualWCControl:!0}))}catch(e){throw console.warn(e),new Error("To use QR modal, please install @reown/appkit package")}if(e)try{this.modal=e}catch(e){throw this.signer.logger.error(e),new Error("Could not generate WalletConnectModal Instance")}}}loadConnectOpts(e){if(!e)return;const{chains:t,optionalChains:s,rpcMap:n}=e;t&&(0,i.OP1)(t)&&(this.rpc.chains=t.map(e=>this.formatChainId(e)),t.forEach(e=>{this.rpc.rpcMap[e]=n?.[e]||this.getRpcUrl(e)})),s&&(0,i.OP1)(s)&&(this.rpc.optionalChains=[],this.rpc.optionalChains=s?.map(e=>this.formatChainId(e)),s.forEach(e=>{this.rpc.rpcMap[e]=n?.[e]||this.getRpcUrl(e)}))}getRpcUrl(e,t){var s;return(null==(s=this.rpc.rpcMap)?void 0:s[e])||`https://rpc.walletconnect.org/v1/?chainId=eip155:${e}&projectId=${t||this.rpc.projectId}`}async loadPersistedSession(){if(this.session)try{const e=await this.signer.client.core.storage.getItem(`${this.STORAGE_KEY}/chainId`),t=this.session.namespaces[`${this.namespace}:${e}`]?this.session.namespaces[`${this.namespace}:${e}`]:this.session.namespaces[this.namespace];this.setChainIds(e?[this.formatChainId(e)]:t?.accounts),this.setAccounts(t?.accounts)}catch(e){this.signer.logger.error("Failed to load persisted session, clearing state..."),this.signer.logger.error(e),await this.disconnect().catch(e=>this.signer.logger.warn(e))}}reset(){this.chainId=1,this.accounts=[]}persist(){this.session&&this.signer.client.core.storage.setItem(`${this.STORAGE_KEY}/chainId`,this.chainId)}parseAccounts(e){return"string"==typeof e||e instanceof String?[this.parseAccount(e)]:e.map(e=>this.parseAccount(e))}}var E=Object.defineProperty,_=Object.defineProperties,O=Object.getOwnPropertyDescriptors,P=Object.getOwnPropertySymbols,A=Object.prototype.hasOwnProperty,M=Object.prototype.propertyIsEnumerable,j=(e,t,s)=>t in e?E(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s,W=(e,t)=>{for(var s in t||(t={}))A.call(t,s)&&j(e,s,t[s]);if(P)for(var s of P(t))M.call(t,s)&&j(e,s,t[s]);return e},S=(e,t)=>_(e,O(t));function R(e){if(e)return{"--w3m-font-family":e["--wcm-font-family"],"--w3m-accent":e["--wcm-accent-color"],"--w3m-color-mix":e["--wcm-background-color"],"--w3m-z-index":e["--wcm-z-index"]?Number(e["--wcm-z-index"]):void 0,"--w3m-qr-color":e["--wcm-accent-color"],"--w3m-font-size-master":e["--wcm-text-medium-regular-size"],"--w3m-border-radius-master":e["--wcm-container-border-radius"],"--w3m-color-mix-strength":0}}const x=e=>{const[t,s]=e.split(":");return k({id:s,caipNetworkId:e,chainNamespace:t,name:"",nativeCurrency:{name:"",symbol:"",decimals:8},rpcUrls:{default:{http:["https://rpc.walletconnect.org/v1"]}}})};function k(e){return W({formatters:void 0,fees:void 0,serializers:void 0},e)}var T=Object.freeze({__proto__:null,convertWCMToAppKitOptions:function(e){var t,s,n,i,a,r,o;const c=null==(t=e.chains)?void 0:t.map(x).filter(Boolean);if(0===c.length)throw new Error("At least one chain must be specified");const h=c.find(t=>{var s;return t.id===(null==(s=e.defaultChain)?void 0:s.id)}),l={projectId:e.projectId,networks:c,themeMode:e.themeMode,themeVariables:R(e.themeVariables),chainImages:e.chainImages,connectorImages:e.walletImages,defaultNetwork:h,metadata:S(W({},e.metadata),{name:(null==(s=e.metadata)?void 0:s.name)||"WalletConnect",description:(null==(n=e.metadata)?void 0:n.description)||"Connect to WalletConnect-compatible wallets",url:(null==(i=e.metadata)?void 0:i.url)||"https://walletconnect.org",icons:(null==(a=e.metadata)?void 0:a.icons)||["https://walletconnect.org/walletconnect-logo.png"]}),showWallets:!0,featuredWalletIds:"NONE"===e.explorerRecommendedWalletIds?[]:Array.isArray(e.explorerRecommendedWalletIds)?e.explorerRecommendedWalletIds:[],excludeWalletIds:"ALL"===e.explorerExcludedWalletIds?[]:Array.isArray(e.explorerExcludedWalletIds)?e.explorerExcludedWalletIds:[],enableEIP6963:!1,enableInjected:!1,enableCoinbase:!0,enableWalletConnect:!0,features:{email:!1,socials:!1}};if(null!=(r=e.mobileWallets)&&r.length||null!=(o=e.desktopWallets)&&o.length){const t=[...(e.mobileWallets||[]).map(e=>({id:e.id,name:e.name,links:e.links})),...(e.desktopWallets||[]).map(e=>({id:e.id,name:e.name,links:{native:e.links.native,universal:e.links.universal}}))],s=[...l.featuredWalletIds||[],...l.excludeWalletIds||[]],n=t.filter(e=>!s.includes(e.id));n.length&&(l.customWallets=n)}return l},defineChain:k})}}]);